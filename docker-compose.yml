# docker-compose.yml
services:
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - user_management
      - shortener_app
    restart: always

  user_management:
    build: ./user_management
    container_name: user_management_app
    env_file:
      - ./user_management/config.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  user_management_worker:
    build: ./user_management
    container_name: user_management_worker
    command: rq worker --with-scheduler -u redis://redis:6379
    env_file:
      - ./user_management/config.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  shortener_app:
    build: ./shortener_app
    container_name: shortener_api_app
    env_file:
      - ./shortener_app/config.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  web_scan:
    build: ./web_scan
    container_name: web_scanner_tool
    env_file:
      - ./web_scan/config.env
    volumes:
      - shared_data:/app/data
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  db:
    image: postgres:13-alpine
    container_name: postgres_db
    ports:
      - "5432:5432" # <-- แก้ไขกลับมาเป็น Port 5432
    environment:
      POSTGRES_USER: myadminuser
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - ./db_init:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myadminuser -d shortener"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: redis_cache
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  shared_data: